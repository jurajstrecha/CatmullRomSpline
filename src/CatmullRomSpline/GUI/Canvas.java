package CatmullRomSpline.GUI;

import CatmullRomSpline.App.Constants;
import CatmullRomSpline.Logic.CatmullRom;
import java.awt.BasicStroke;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 * Canvas containing all the drawing. User annotates control points here and
 * resulting spline will be drawn onto the canvas afterwards. It also stores
 * annotated control points which can be obtained by the public method getControlPoints().
 * 
 * @author Juraj Strecha, duri.strecha@gmail.com
 * @version 1.0
 */
public class Canvas extends JPanel {
    
    private ArrayList<Point> controlPoints;
    private ArrayList<Point> splinePoints;
    
    public Canvas() {
        super();
        controlPoints = new ArrayList<Point>();
        splinePoints = new ArrayList<Point>();
        
        addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent me) { 
                    controlPoints.add(me.getPoint());
                    repaint();
                }                
            }
        );
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawControlPoints(g);
        drawSplinePoints(g);

    }
    
    /**
     * Draws crosses in the place where the user declares a control point.
     * 
     * @param g Graphics context
     */
    private void drawControlPoints(Graphics g) {
        if (controlPoints != null && !controlPoints.isEmpty()) {
            for (Point p: controlPoints) {
                g.setColor(Constants.CONTROL_POINT_COLOR);
                int x = (int)Math.round(p.getX());
                int y = (int)Math.round(p.getY());
                g.drawLine(x + Constants.CROSS_HORIZ_DIAMETER, y - 1,
                           x - Constants.CROSS_HORIZ_DIAMETER, y - 1);
                g.drawLine(x + Constants.CROSS_HORIZ_DIAMETER, y,
                           x - Constants.CROSS_HORIZ_DIAMETER, y);
                g.drawLine(x + Constants.CROSS_HORIZ_DIAMETER, y + 1,
                           x - Constants.CROSS_HORIZ_DIAMETER, y + 1);

                g.drawLine(x - 1, y + Constants.CROSS_VERT_DIAMETER,
                           x - 1, y - Constants.CROSS_VERT_DIAMETER);
                g.drawLine(x, y + Constants.CROSS_VERT_DIAMETER,
                           x, y - Constants.CROSS_VERT_DIAMETER);
                g.drawLine(x + 1, y + Constants.CROSS_VERT_DIAMETER,
                           x + 1, y - Constants.CROSS_VERT_DIAMETER);
            }
        } 
    }
    
    /**
     * Draws interpolating spline using lines between spline points.
     * 
     * @param g Graphics context
     */
    private void drawSplinePoints(Graphics g) {
        if (splinePoints != null && !splinePoints.isEmpty()) {
            g.setColor(Constants.SPLINE_COLOR);
            Point recentPoint = CatmullRom.getFirstPoint(splinePoints);
            Point currentPoint;
            Graphics2D g2 = (Graphics2D)g;
            g2.setStroke(new BasicStroke(Constants.SPLINE_THICKNESS));
            for (int i = 1; i < splinePoints.size(); i++) {
                currentPoint = splinePoints.get(i);
                g.drawLine(recentPoint.x, recentPoint.y,
                           currentPoint.x, currentPoint.y);
                recentPoint = currentPoint;
            }
        }
    }
    
    /**
     * Resets the state of the canvas and clears it.
     */
    public void reset() {
        controlPoints.clear();
        splinePoints.clear();
        repaint();
    }

    /**
     * Sets the spline points generated by the CatmullRom.calculateSpline()
     * method.
     * 
     * @param points Set of spline points
     */
    public void setSplinePoints(ArrayList<Point> points) {
        this.splinePoints = points;
        repaint();
    }
    
    /**
     * Returns a set of control points stored within the canvas provided by the
     * user by clicking the canvas area in the GUI of the application.
     * 
     * @return Set of control points
     */
    public ArrayList<Point> getControlPoints() {
        return controlPoints;
    }
}
